
import com.sun.net.ssl.internal.ssl.Provider;
import java.security.Security;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.SSLSocket;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author USER
 */
public class ServerFrame extends javax.swing.JFrame {

     /**
      * Creates new form ServerFrame
      */
     public ServerFrame() {
          initComponents();
     }

     /**
      * This method is called from within the constructor to initialize the
      * form. WARNING: Do NOT modify this code. The content of this method is
      * always regenerated by the Form Editor.
      */
     @SuppressWarnings("unchecked")
     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
     private void initComponents() {

          jButton1 = new javax.swing.JButton();
          output = new java.awt.TextArea();
          jLabel1 = new javax.swing.JLabel();

          setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
          setMinimumSize(new java.awt.Dimension(460, 300));
          getContentPane().setLayout(null);

          jButton1.setText("Start Server");
          jButton1.addActionListener(new java.awt.event.ActionListener() {
               public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
               }
          });
          getContentPane().add(jButton1);
          jButton1.setBounds(112, 45, 91, 23);
          getContentPane().add(output);
          output.setBounds(36, 103, 354, 173);

          jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank03.jpg"))); // NOI18N
          getContentPane().add(jLabel1);
          jLabel1.setBounds(0, 0, 460, 300);

          pack();
     }// </editor-fold>//GEN-END:initComponents
static String hostnames[]=new String[] {"zero", "one", "two", "three", "four",
     "five", "six", "seven", "eight", "nine","ten", "eleven", "twelve", "thirteen", "fourteen",
     "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};

     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

		
			// Registering the JSSE provider
			Security.addProvider(new Provider());
                                
			//Specifying the Keystore details
////			System.setProperty("javax.net.ssl.keyStore","E:\\NS Final\\src\\server.ks");
			System.setProperty("javax.net.ssl.keyStore","server.ks");
			System.setProperty("javax.net.ssl.keyStorePassword","password");
                                 output.setText("Certificate Embeded In : "+System.getProperty("javax.net.ssl.keyStore")+"\n");

                      
   try {

                int Port = 5787;
                int NumberOfThreads = 20;
                SSLServerSocketFactory sslServerSocketfactory = (SSLServerSocketFactory)SSLServerSocketFactory.getDefault();
	     SSLServerSocket sslServerSocket = (SSLServerSocket)sslServerSocketfactory.createServerSocket(Port);
                ExecutorService threadExecutor = Executors.newFixedThreadPool(NumberOfThreads);
                Task Threads[] = new Task[NumberOfThreads];
                output.append("Server started ...\n");
                
                int j=0;
                
                while(true){
                    output.append("waiting for clients ...\n");
                    SSLSocket sslSocket = (SSLSocket)sslServerSocket.accept();
                    output.append("clieint "+j+ " connected\n");
                    Threads[j] = new Task(sslSocket,hostnames[j]);
                    threadExecutor.execute(Threads[j]);
        j++;
            }
        } 
        catch (Exception ex) {        }     }//GEN-LAST:event_jButton1ActionPerformed

     /**
      * @param args the command line arguments
      */
     public static void main(String args[]) {
          /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
           * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
           */
          try {
               for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                         javax.swing.UIManager.setLookAndFeel(info.getClassName());
                         break;
                    }
               }
          } catch (ClassNotFoundException ex) {
               java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          } catch (InstantiationException ex) {
               java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          } catch (IllegalAccessException ex) {
               java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          } catch (javax.swing.UnsupportedLookAndFeelException ex) {
               java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          }
        //</editor-fold>

          /* Create and display the form */
          java.awt.EventQueue.invokeLater(new Runnable() {
               public void run() {
                    new ServerFrame().setVisible(true);
               }
          });
     }

     // Variables declaration - do not modify//GEN-BEGIN:variables
     private javax.swing.JButton jButton1;
     private javax.swing.JLabel jLabel1;
     public static java.awt.TextArea output;
     // End of variables declaration//GEN-END:variables
}
